# # Поиск образцов текста без использования регулярных выражений
# def is_phone_number(text):
#     if len(text) != 12:
#         return False
#     for i in range(0, 3):
#         if not text[i].isdecimal():
#             return False
#     if text[3] != '-':
#         return False
#     for i in range(4, 7):
#         if not text[i].isdecimal():
#             return False
#     if text[7] != '-':
#         return False
#     for i in range(8, 12):
#         if not text[i].isdecimal():
#             return False
#     return True
# print('415-555-4242 - это телефонный номер?')
# print(is_phone_number('415-555-4242'))
# print('Moshi moshi - это телефонный номер?')
# print(is_phone_number('Moshi moshi'))


# Поиск образцов текста с помощью регулярных выражений
# Компактное описание текстовых шаблонов можно создать с помощью регулярных выражений. Например, регулярному
# выражению \d соответствует любой цифровой символ, т.е. любая одиночная цифра от 0 до 9. Регулярное выражение
# \d\d\d-\d\d\d-\d\d\d\d позволяет находить текстовые строки того же формата. В то же время регулярные выражения
# могут быть гораздо более сложными. Например, указав 3 в фигурных скобках после шаблона({3}), мы сообщаем следующее:
# "Искать троекратное соотвествие данному шаблону". По-этому корректному телефонному номеру будет соответствовать
# корректный шаблон: \d{3}-\d{3}-\d{4}/


# # Создание объектов Regex
# # В Python все функции, предназначенные для работы с регулярными выражениями , содержатся в модуле re
# import re
#
#
# # Функция re.compile() возвращает объект Regex, соответствующий переданной строке регулярного выражения.
# phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')


# Поиск соответствий объектам regex
# # Метод search() объекта Regex ищет в переданной ему строке любые совпадения с регулярным выражением. В случае
# # отсутствия совпадений возвращается значение None. Если совпадения обнаружены, то возвращается объект Match. У такого
# # объекта есть метод group(), который возвращает найденные соответствия шаблону.
# import re
# phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
# mo = phone_num_regex.search('Мой номер: 415-555-4242.')
# print('Найденный номер телефона: ' + mo.group())


# Пошаговая процедура
# 1. Импортируйте модуль регулярных выражений с помощью инструкции import re
# 2. Создайте объект Regex с помощью функции re.compile(). (Ему должна быть передана необработанная строка поискового
# шаблона регулярного выражения.)
# 3. Передайте строку, в которой выполняется поиск, методу search() объекта Regex. Этот метод возвращает объект Match.
# 4. Вызовите метод group() объекта Match, чтобы получить строку, которая содержит найденный текст, соответствующий
# заданному регулярному выражению.


# # Создание групп с помощью круглых скобок
# # Предположим, вы хотите отделить код региона от остальной части телефонного номера. Добавление круглых скобок
# # приводит к созданию групп в регулярном выражении: (\d\d\d)-(\d\d\d-\d\d\d\d). Теперь можно использовать метод
# # group() объекта Match для получения текста, соответствующего только одной группе. Первый набор круглых скобок в
# # строке регулярного выражения будет группой 1, второй набор - группой 2 и т.д. Передавая целые числа 1 или 2 методу
# # group(), вы сможете отбирать различные фрагменты совпавшего текста. Если метод group вызывается с аргументом 0 или
# # вообще без аргументов, то он возвращает весь найденный текст, соответствующий шаблону.
# import re
# phone_num_regex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
# mo = phone_num_regex.search('Мой номер: 415-555-4242')
# print(mo.group(1))
# print(mo.group(2))
# print(mo.group(0))
#
# # Если нужно извлечь сразу все группы, используйте метод groups().
# print(mo.groups())
# area_code, main_number = mo.groups()
# print(area_code)
# print(main_number)


# Круглые скобки трактуются как спецсимволы в регулярных выражениях, но что если нужно найти в тексте сами скобки?
# Например, в телефонных номерах круглые скобки часто используются для выделения кода региона. В таких случаях символы
# ( и ) должны экранироваться с помощью обратной косой черты.
import re
phone_num_regex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
mo = phone_num_regex.search('Мой номер: 415-555-4242.')
mo.group(1)
mo.group(2)


# Экранированные символы \( и \) в необработанной строке, передаваемой методу re.compile(), означают соответствие
# фактическим символам круглых скобок. В регулярных выражениях следующие символы имеют специальное значение:
# . ^ $ * + ? { } [ ] \ | ( )
# Если требуется найти их в текстовом шаблоне, нужно экранировать их с помощью обратной косой черты:
# \. \^ \$ \* \+ \? \{ \} \[ \] \\ \| \( \)


# Выбор альтернативных групп с помощью канала













































