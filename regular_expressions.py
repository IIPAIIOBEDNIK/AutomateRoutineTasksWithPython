# # Поиск образцов текста без использования регулярных выражений
# def is_phone_number(text):
#     if len(text) != 12:
#         return False
#     for i in range(0, 3):
#         if not text[i].isdecimal():
#             return False
#     if text[3] != '-':
#         return False
#     for i in range(4, 7):
#         if not text[i].isdecimal():
#             return False
#     if text[7] != '-':
#         return False
#     for i in range(8, 12):
#         if not text[i].isdecimal():
#             return False
#     return True
# print('415-555-4242 - это телефонный номер?')
# print(is_phone_number('415-555-4242'))
# print('Moshi moshi - это телефонный номер?')
# print(is_phone_number('Moshi moshi'))


# Поиск образцов текста с помощью регулярных выражений
# Компактное описание текстовых шаблонов можно создать с помощью регулярных выражений. Например, регулярному
# выражению \d соответствует любой цифровой символ, т.е. любая одиночная цифра от 0 до 9. Регулярное выражение
# \d\d\d-\d\d\d-\d\d\d\d позволяет находить текстовые строки того же формата. В то же время регулярные выражения
# могут быть гораздо более сложными. Например, указав 3 в фигурных скобках после шаблона({3}), мы сообщаем следующее:
# "Искать троекратное соотвествие данному шаблону". По-этому корректному телефонному номеру будет соответствовать
# корректный шаблон: \d{3}-\d{3}-\d{4}/


# Создание объектов Regex






























































