# # Как правило, мы выполняем проверку ввода, неоднократно запрашивая данные у пользователя, пока он не введет
# # корректный текст.
# while True:
#     print('Укажите ваш возраст:')
#     age = input()
#     try:
#         age = int(age)
#     except:
#         print('Пожалуйста, введите цифры.')
#         continue
#     if age < 1:
#         print('Пожалуйста, введите положительное число.')
#         continue
#     break
# print(f'Вам {age} лет.')
# # Программа предлагает ввести возраст до тех пор, пока не будет введено правильное значение.




# # Модуль PyInputPlus
# # Модуль PyInputPlus содержит функции, аналогичные input(), которые предназначены для ввода различных типов данных:
# # чисел, дат, адресов электронной почты и т.п. Если пользователь введет недопустимое значение, например неверно
# # отформатированную дату или число за пределами допустимого диапазона, модуль PyInputPlus предложит ввести данные
# # повторно, как в приведенном выше примере. В модуле PyInputPlus реализованы и другие полезные возможности, такие
# # как ограничение количества повторных запросов или тайм-аут, если пользователь должен уложиться в определенные
# # временные рамки. Модуль PyInputPlus не является частью стандартной библиотеки Python, поэтому его нужно установить
# # отдельно с помощью утилиты pip
# #pip install --user pyinputplus
# # Чтобы проверить, корректно ли установлен модуль PyInputPlus, импортируйте его в интерактивной оболочке:
# import pyinputplus
#
# # Модуль PyInputPlus содержит несколько функций, предназначенных для обработки различных типов вводимых данных.
# # inputStr(). Аналогична встроенной функции input(), но поддерживает расширенные возможности модуля PyInputPlus.
# #   Ей можно передать пользовательскую функцию для проверки введенных данных.
# # inputNum(). Гарантирует ввод числа и возвращает значение типа int или float, в зависимости от того, содержит ли
# #   введенное число десятичную точку.
# # inputChoice(). Гарантирует выбор одного из предложенных вариантов.
# # inputMenu(). Аналогична функции inputChoice(), но отображает меню с числовыми и буквенными вариантами.
# # inputDatetime(). Гарантирует ввод значений даты и времени.
# # inputYesNo(). Гарантирует, что пользователь введет ответ "да/нет".
# # inputBool(). Аналогична функции inputYesNo(), но распознает ответ "True" или "False" и возвращает соответствующее
# #   булево значение.
# # inputEmail(). Гарантирует ввод корректного адреса электронной почты.
# # inputFilepath(). Гарантирует ввод правильного имени файла (включая путь) и может дополнительно проверять,
# #   существует ли файл с таким именем.
# # inputPassword(). Аналогична встроенной функции input(), но отображает символы * вместо вводимых символов, что
# #   позволяет безопасно вводить пароли и другую конфиденциальную информацию.


# # Эти функции автоматически выводят новый запрос до тех пор, пока не будут введены корректные данные.
# import pyinputplus as pyip
# response = pyip.inputNum()
# print(response)
# # Выражение as pyip в инструкции import избавляет от необходимости указывать pyinputplus каждый раз, когда нужно
# # вызвать функцию из этого модуля.

# # Как и в случае функции input(), функциям модуля PyInputPlus можно передать строку приглашения с помощью
# # именованного аргумента prompt.
# response = input('Введите число: ')
# print(response)
# import pyinputplus as pyip
# response = pyip.inputInt(prompt='Введите число: ')
# print(response)
# # В отличие от встроенной функции input(), функции модуля PyInputPlus имеет ряд дополнительных возможностей проверки




# Именованные аргументы min, max, greaterThan и lessThan
# Функции inputNum(), inputInt() и inputFloat(), которые работают с целыми числами и числами с плавающей точкой,
# поддерживают именованные аргументы min, max, greaterThan и lessThan, с помощью которых можно задать диапазон
# допустимых значений
import pyinputplus as pyip
response = pyip.inputNum('Введите число: ', min=4)
print(response)
response = pyip.inputNum('Введите число: ', greaterThan=4)
print(response)
response = pyip.inputNum('>', min=4, lessThan=6)
print(response)
# Это необязательные аргументы, но если они указаны, то вводимые значения не могут быть меньше аргумента min или
# больше аргумента max(но могут быть равны им). Кроме того, вводимые значения должны быть больше, чем аргумент
# greaterThan, и меньше, чем аргумент lessThan(т.е. они не могут быть равны им).




# Именованный аргумент blank
















































