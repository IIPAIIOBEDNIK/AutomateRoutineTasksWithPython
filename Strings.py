# Строковые литералы
# Строки в Python начинаются и заканчиваются одинарными кавычками. Но как быть, если кавычка стоит в самой строке?
# Вводить строки вида 'That is Alice's cat.' нельзя, поскольку Python интерпретируется апостроф как закрывающую
# кавычку, и оставшаяся часть текста(s cat.') будет воспринята как недопустимый код.


# Двойные кавычки
# Начало и конец строки можно обозначать не только одинарными, но и двойными кавычками. Преимущество двойных кавычек
# в том, что они позволяют трактовать одинарные кавычки как апостроф.
spam = "That is Alice's cat"
# Поскольку строка начинается с двойной кавычки, Python считает одинарную кавычку апострофом в составе строки и не
# помечает оставшийся текст как ошибочный. Если же в строке нужны одинарные, так и двойные кавычки, то необходимо
# прибегнуть к экранированию символов.


# Экранирование символов
# Благодаря экранированию в строке можно использовать символы, вставить которые по-другому невозможно. Экранированный
# символ предваряется обратной косой чертой(\), за которой следует сам символ, добавляемый в строку.
spam = 'Say hi to Bob\'s mother.'
# \'    Одинарная кавычка(апостроф)
# \"    Двойная кавычка
# \t    Табуляция
# \n    Новая строка(разрыв строки)
# \\    Обратная косая черта

print("Hello there!\nHow are you?\nI\'m doing fine.")


# Необработанные строки















































































