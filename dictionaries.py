# # Словарь - это изменяемая коллекция значений. Однако в словарях, в отличие от списков, индексами могут
# # быть не только целые числа, но и другие типы данных. Индексы в словарях называются ключами, а ключ вместе с
# # соответствующим ему значением - парой "ключ - значение".
# # В Python словари обозначаются фигурными скобками ({})
# my_cat = {'размер': 'толстый', 'цвет': 'серый', 'характер': 'шумный'}
#
# # Доступ к значениям осуществляется с помощью ключей
# print(my_cat['размер'])
# print('У моего кота ' + my_cat['цвет'] + ' мех.')
#
# # Индексами в словарях, как и в списках, могут служить целые числа, однако их отсчет необязательно должен начинаться
# # с нуля.
# spam = {12345: 'Код замка', 42: 'Ответ'}




# # Сравнение словарей и списков
# # В отличие от списков, в словарях элементы не упорядочены. Первым элементом в списке spam был spam[0]. Однако к
# # словарям понятие первый элемент не применимо. Порядок элементов важен при проверке идентичности двух списков, но для
# # словарей не имеет значения, в каком порядке в них были включены пары "ключ - значение".
# spam = ['коты', 'собаки', 'лоси']
# bacon = ['собаки', 'лоси', 'коты']
# print(spam == bacon)
#
# eggs = {'имя': 'Софи', 'вид': 'кот', 'возраст': '8'}
# ham = {'вид': 'кот', 'возраст': '8', 'имя': 'Софи'}
# print(eggs == ham)
# # Поскольку словари не упорядочены, для них нельзя создавать срезы, в отличие от списков.


# # При попытке обратиться к ключу, отсутствующему в словаре, будет сгенерировано исключение KeyError, напоминающее
# # исключение IndexError, которое возникает при выходе за пределы допустимого диапазона индексов в списке.
# spam = {'имя': 'Софи', 'возраст': 7}
# print(spam['цвет'])


# # Несмотря на то, что словари не упорядочены, возможность извлечь произвольное значение по его ключу делает их очень
# # удобными структурами
# birthdays = {'Алиса': 'Апрель 1', 'Боб': 'Декабрь 12', 'Кэрол': 'Март 4'}
# while True:
#     print('Введите имя (<Enter> для выхода) :')
#     name = input()
#     if name == '':
#         break
#     if name in birthdays:
#         print(name + ': день рождения - ' + birthdays[name])
#     else:
#         print('Я не знаю, когда день рождения у ' + name)
#         print('Когда день рождения у этого человека?')
#         bday = input()
#         birthdays[name] = bday
#         print('Обновлена информация о днях рождения.')
# # Разумеется, по завершении работы программы все введенные вами данные теряются




# # Методы keys(), values() и items()
# # Для работы со словарями предусмотрены методы keys(), values() и items(), которые возвращают соответственно ключи,
# # значения и пары "ключ - значение". Возвращаемые этими методами коллекции не являются списками: их нельзя изменять,
# # и у них нет метода append(). В то же время эти типы данных(dict_keys, dict_values и dict_items соответственно) можно
# # использовать в циклах for.
# spam = {'цвет': 'красный', 'возраст': 42}
# for v in spam.values():
#     print(v)
#
# # Здесь цикл for проходит по всем значениям, содержащимся в словаре spam. То же самое можно сделать для ключей и пар
# # "ключ - значение"
# for k in spam.keys():
#     print(k)
#
# for i in spam.items():
#     print(i)
# # Используя методы keys(), value() и items(), можно организовать перебор ключей, значений и пар "ключ - значение"
# # соответственно. Обратите внимание на то, что значение типа dict_items, возвращаемые методом items(), представляют
# # собой кортежи образуемые ключами и связанными с ними значениями словаря.


# # Если необходимо получить результат в виде списка, передайте функции list() значение, возвращаемое любым из этих
# # трех методов
# spam = {'цвет': 'красный', 'возраст': 42}
# print(spam.keys())
# print(list(spam.keys()))
# # В строке list(spam.keys()) значение типа dict_keys(), возвращаемое функцией keys(), передается функции list(),
# # которая формирует список ['цвет', 'возраст'].


# # Кроме того, можно воспользоваться групповым присваиванием в цикле for для присваивания ключей и связанных с ними
# # значений отдельным переменным.
# spam = {'цвет': 'красный', 'возраст': 42}
# for k, v in spam.items():
#     print('Ключ: ' + k + ', значение: ' + str(v))




# Проверка наличия ключа или значения в словаре.
# Как вам уже известно, операторы in и not in позволяют проверить, содержится ли указанное значение в списке.
# Эти же операторы можно использовать и для того, чтобы проверить, содержится ли в словаре заданный ключ или значение.
spam = {'имя': 'Софи', 'возраст': 7}
print('имя' in spam.keys())
print('Софи' in spam.values())
print('цвет' in spam.keys())
print('цвет' not in spam.keys())
print('цвет' in spam)
# Выражение 'цвет' in spam представляет собой сокращенную запись выражения 'цвет' in spam.keys(). Это общее правило:
# если нужно проверить, является ли данное значение ключом в словаре, то после ключевого слова in(или not in)
# достаточно указать только имя словаря.




# Метод get()































